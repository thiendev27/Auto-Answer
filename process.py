from docx2python import docx2python
from docx import Document
from docx.enum.text import WD_COLOR_INDEX
def is_answer(s):
	if "A." in s or "B." in s or "C." in s or "D." in s:
		return True
	return False
class Analyze:
	def __init__(self):
		#	KHAI BÁO BIẾN MỚI
		self.data = []
		self.answer = []
		self.document = Document()
		self.is_process_complete = False
		self.preview_dat = []
	def getExam(self, file):
		data = []
		try:
			#	LẤY DỮ LIỆU FILE CÂU HỎI
			with docx2python(file) as f:
				data = f.text
			f.close()
			self.data = [a for a in data.split("\n")]
			del data
		except Exception as e:
			print("Get Exam",e)
	def getAnswer(self, file):
		try:
			#	LẤY CÂU TRẢ LỜI
			# print("[!] File đáp án cần khớp với file câu hỏi")
			data = []
			with docx2python(file) as docx_content:
				data = docx_content.text.replace("\t", " ").replace(")", " ").split()
			docx_content.close()
			data = [dat for dat in data if not dat.isdigit()]
			self.answer = data.copy()
			#	GIẢI PHÓNG BỘ NHỚ
			del data
		except Exception as e:
			print("Get Answer", e)
	def makeDocument(self):
		try:
			self.preview_dat = []
			if self.answer and self.data:
				choices = []
				[choices.append(i.split() if is_answer(i) else []) for i in self.data].clear()
				for c, choice in enumerate(choices):
					for checked in ["A.", "B.", "C.", "D."]:
						enum = choice.index(checked) if choice.count(checked) > 0 else -1
						i = enum
						if enum != -1:
							while True:
								enum += 1
								if enum < len(choice) and not is_answer(choice[enum]):
									# Nối đáp án
									choice[i] += " " + choice[enum]
									choice[enum] = ''
								else:
									break
				# Option !
				mark = [" ".join(choice) for choice in choices]
				mark = [i for i, a in enumerate(mark) if "A." in a]
				self.document.add_paragraph("*** Generated by AutoAnswer with python-docx modules ***")
				for m in range(len(self.data)):
					if not is_answer(self.data[m]) and self.data[m] != "":
						self.document.add_paragraph(self.data[m])
						self.preview_dat.append(self.data[m])
					if m in mark:
						i = mark.index(m)
						end = mark[i + 1] if m != max(mark) else len(choices)
						for j in range(m, end):
							self.preview_dat.append(choices[j])
							if choices[j] != []:
								p = self.document.add_paragraph()
								for o in range(len(choices[j])):
									if choices[j][o] != "":
										run = p.add_run(choices[j][o])
										p.add_run("\t")
										if i < len(self.answer):
											if self.answer[i] + "." in choices[j][o]:
												run.font.highlight_color = WD_COLOR_INDEX.YELLOW
												self.preview_dat[-1][o] = f"<span style='background-color:yellow;'>{self.preview_dat[-1][o]}"
										self.preview_dat[-1][o] += "</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>"

								self.preview_dat[-1] = ["<p>"] + self.preview_dat[-1] + ["</p>"]
				del choices
				del mark
				self.is_process_complete = True
			else:
				raise Exception("Cần phải có đủ đáp án và câu hỏi!")
		except Exception as e:
			print("Make Document", e)
	def saveDocument(self, name):
		self.document.core_properties.author = "AutoAnswerbyThiendev<3"
		self.document.save(name)
		self.is_process_complete = False
if __name__ == "__main__":
	doc = Analyze()
	doc.getExam("test_file.docx")
	doc.getAnswer("answer.docx")
	doc.makeDocument()
	doc.saveDocument("t2.docx")
